#!/bin/sh

if [ $# -ne 1 ] ; then
	echo -e "Incorrect number of parameters.\nUsage:\n\tod-update <data_dir>"
	exit 1
fi

$(sed -n 's/.*root=\([[:alnum:]:\/]\+\).*rootfstype=\([[:alpha:]]\+\).*/export SYSPART=\1\nexport SYSPART_TYPE=\2/p' /proc/cmdline)

# Old OpenDingux firmwares did not pass valid root/rootfstype params.
# Hardcode here the setting they used.
[ -z "$SYSPART" ] && export SYSPART=/dev/mmcblk0p1
[ -z "$SYSPART_TYPE" ] && export SYSPART_TYPE=vfat

HWVARIANT_BL=""
HWVARIANT_DT=""

HWVARIANT_CMDLINE="$(sed -n 's/.*hwvariant=\([[:alnum:]_]\+\).*/\1/p' /proc/cmdline)"

if [ -e /sys/firmware/devicetree/base/compatible ] ; then
	IFS= read -r -d $'\0' MODEL </sys/firmware/devicetree/base/compatible
	if [ -e /sys/firmware/devicetree/base/model ] ; then
		HWVARIANT=$(cat /sys/firmware/devicetree/base/model)
	fi
elif [ "$HWVARIANT_CMDLINE" = "rg350" ] ; then
	if [ "$(uname -v)" = "#227 Tue Jul 20 11:36:58 CST 2021" ] ; then
		MODEL=ylm,rg300x
	elif [ "$(uname -v)" = "#128 Fri May 29 11:19:07 CST 2020" ] ; then
		MODEL=ylm,rg280m
	elif [ "$(uname -v)" = "#171 Tue Jun 30 18:36:05 CST 2020" ] ; then
		MODEL=ylm,rg280v
	elif [ "$(uname -v)" = "#2 Sat Mar 28 16:19:20 CST 2020" ] ; then
		MODEL=wolsen,pocketgo2v2
	elif [ -r /sys/devices/platform/jz-lcd.0/graphics/fb0/modes -a \
		"$(grep '640x480' /sys/devices/platform/jz-lcd.0/graphics/fb0/modes)" ] ; then
		MODEL=ylm,rg350m
	else
		MODEL=ylm,rg350
	fi
elif [ "$(uname -v)" = "#35 Thu Sep 26 23:15:49 CST 2019" ] ; then
	MODEL=wolsen,pocketgo2
else
	case "$HWVARIANT_CMDLINE" in
		v11_ddr2_256mb|v20_mddr_512mb)
			MODEL=gcw,zero
			HWVARIANT="$HWVARIANT_CMDLINE"
			;;
		*)
			echo "Unknown device."
			exit 1
			;;
	esac
fi

# Default to SYSDEV=/dev/mmcblk0
SYSDEV=$(echo $SYSPART |sed -n 's/\(\/dev\/mmcblk[0-9]\+\)p[0-9]\+/\1/p')

[ "$MODEL" = "retromini" ] && MODEL=ylm,rs90
[ "$MODEL" = "ylm,rg280m" ] && MODEL=ylm,rg280m-v1.1

case "$MODEL" in
	ylm,rs90|ylm,pmp5|ylm,rg99)
		HWVARIANT_BL="$HWVARIANT_CMDLINE"
		HWVARIANT_DT=$(echo $MODEL |cut -d',' -f2)
		INSTALL_ON_NAND=Y
		SYSDEV=/dev/mtd0
		;;
	ylm,rs97|ylm,rg300|wolsen,ldkv|wolsen,ldkh|ylm,papk3s)
		HWVARIANT_BL="lepus"
		HWVARIANT_DT=$(echo $MODEL |cut -d',' -f2)
		;;
	qishenglong,gopher2)
		HWVARIANT_BL="gopher2"
		HWVARIANT_DT="gopher2"
		;;
	qishenglong,gopher2b)
		HWVARIANT_BL="gopher2b"
		HWVARIANT_DT="gopher2b"
		;;
	gcw,zero)
		case "$HWVARIANT" in
			"GCW Zero"|v20_mddr_512mb)
				HWVARIANT_BL="v20_mddr_512mb"
				HWVARIANT_DT="gcw0"
				;;
			*)
				HWVARIANT_BL="v11_ddr2_256mb"
				HWVARIANT_DT="gcw0_proto"
				;;
		esac
		;;
	img,ci20)
		HWVARIANT_BL="ci20"
		HWVARIANT_DT="ci20"
		;;
	wolsen,playgo|wolsen,pocketgo2v2)
		HWVARIANT_DT="pocketgo2v2"
		HWVARIANT_BL="rg350"
		;;
	wolsen,pocketgo2)
		HWVARIANT_DT=$(echo $MODEL |cut -d',' -f2)
		HWVARIANT_BL="v20_mddr_512mb"
		;;
	anbernic,rg350|anbernic,rg350m|ylm,rg350|ylm,rg350m|ylm,rg280m-*|ylm,rg280v|ylm,rg300x)
		HWVARIANT_DT=$(echo $MODEL |cut -d',' -f2)
		HWVARIANT_BL="rg350"
		;;
	*)
		echo "Unknown model $MODEL"
		exit 1
		;;
esac

MNT=/mnt/_system_update
[ "$(grep kernel_bak /proc/cmdline)" ] && KERNEL_IS_BACKUP=Y
[ "$(grep rootfs_bak /proc/cmdline)" ] && ROOTFS_IS_BACKUP=Y

BOOTLD=$1/ubiboot-${HWVARIANT_BL}.bin
KERNEL=$1/uzImage.bin
ROOTFS=$1/rootfs.squashfs
MODULES_FS=$1/modules.squashfs
MININIT=$1/mininit-syspart
DEVICETREE=$1/${HWVARIANT_DT}.dtb

[ ! -r $DEVICETREE ] && DEVICETREE=/sys/firmware/fdt


handle_err() {
	rm -f $MNT/new_uzImage.bin $MNT/new-rootfs.squashfs \
		  $MNT/new-modules.squashfs $MNT/mininit-syspart-new

	# Umount twice, since we bind-mounted twice
	umount $MNT
	umount $MNT
	rmdir $MNT

	exit $1
}

cat_file() {
	if [ -x /usr/bin/pv ] ; then
		/usr/bin/pv -p $*
	else
		cat $*
	fi
}

cat_file_size() {
	if [ -x /usr/bin/pv ] ; then
		/usr/bin/pv -p -s $1
	else
		cat
	fi
}

mkdir -p $MNT

# If possible, try to run the od-update script from the new rootfs
if [ -r $ROOTFS -a "$0" != "/tmp/od-update" ] ; then
	mount -o loop $ROOTFS $MNT > /dev/null 2>&1
	if [ $? -eq 0 ] ; then
		if [ -r $MNT/usr/sbin/od-update ] ; then
			cp $MNT/usr/sbin/od-update /tmp/od-update
			umount $MNT

			# Run the updated od-update script from the rootfs
			exec /tmp/od-update $*
		else
			umount $MNT
		fi
	fi
fi

# bind-mount /boot read-write
mount --bind $MNT $MNT
# /boot has already been mounted with --make-shared
mount --make-slave $MNT
mount --bind /boot $MNT
mount -o remount,rw $MNT

if [ -r $ROOTFS ] ; then
	echo "Updating rootfs..."
	cat_file $ROOTFS > $MNT/new-rootfs.squashfs
	[ $? -ne 0 ] && handle_err 2
fi

if [ -r $MININIT ] ; then
	echo -e "\nUpdating mininit..."
	cat_file $MININIT > $MNT/mininit-syspart-new
	[ $? -ne 0 ] && handle_err 3

	chmod +x $MNT/mininit-syspart-new
fi

if [ -r $KERNEL ] ; then
	echo -e "\nUpdating kernel..."

	KERNEL_SIZE=$(wc -c $KERNEL |cut -d ' ' -f1)
	DTB_SIZE=$(wc -c $DEVICETREE |cut -d ' ' -f1)

	if [ "$INSTALL_ON_NAND" ] ; then
		VOLUME_ID=$(ubinfo -d 0 -N kernel_bak |head -n1 |sed "s/.*\([[:digit:]]\+\) .*/\1/")
		if [ "$KERNEL_IS_BACKUP" ] ; then
			VOLUME_ID=$(expr 1 - $VOLUME_ID)
		fi

		cat_file $KERNEL $DEVICETREE | ubiupdatevol /dev/ubi0_$VOLUME_ID -s $(expr $KERNEL_SIZE + $DTB_SIZE) -
	else
		cat_file $KERNEL $DEVICETREE > $MNT/new_uzImage.bin
	fi

	[ $? -ne 0 ] && handle_err 4
fi

if [ -r $MODULES_FS ] ; then
	echo -e "\nInstalling updated modules..."
	cat_file $MODULES_FS > $MNT/new-modules.squashfs
	[ $? -ne 0 ] && handle_err 5
fi

if [ -r $BOOTLD ] ; then
	echo -e "\nUpdating bootloader..."

	if [ "$INSTALL_ON_NAND" ] ; then
		flash_erase $SYSDEV 0 1 >/dev/null 2>&1
		[ $? -ne 0 ] && handle_err 6

		cat_file $BOOTLD | nandwrite -q -p $SYSDEV -
	else
		dd if=$BOOTLD of=$SYSDEV bs=512 seek=1 count=16 conv=notrunc 2>/dev/null
	fi

	[ $? -ne 0 ] && handle_err 6
fi

echo -e "\nFlushing caches..."
sync

# Make sure that the verification steps use data from disk, not cached data.
echo 3 > /proc/sys/vm/drop_caches

if [ -r $ROOTFS -a -r ${ROOTFS}.sha1 ] ; then
	echo -e "\nVerifying rootfs..."
	ROOTFS_SHA1=$(cat_file $MNT/new-rootfs.squashfs |sha1sum |cut -d' ' -f1)

	if [ "$ROOTFS_SHA1" != "$(cat ${ROOTFS}.sha1)" ] ; then
		handle_err 7
	fi
fi

if [ -r $MININIT -a -r ${MININIT}.sha1 ] ; then
	echo -e "\nVerifying mininit..."
	MININIT_SHA1=$(cat_file $MNT/mininit-syspart-new |sha1sum |cut -d' ' -f1)

	if [ "$MININIT_SHA1" != "$(cat ${MININIT}.sha1)" ] ; then
		handle_err 8
	fi
fi

if [ -r $KERNEL -a -r ${KERNEL}.sha1 ] ; then
	echo -e "\nVerifying kernel..."

	[ "$INSTALL_ON_NAND" ] && BLOCK_SIZE=4096 || BLOCK_SIZE=512
	NB_BLOCKS=$(expr $KERNEL_SIZE \/ $BLOCK_SIZE)
	LEFTOVER=$(expr $KERNEL_SIZE \% $BLOCK_SIZE)

	if [ "$INSTALL_ON_NAND" ] ; then
		KERNEL_SHA1=$( ( dd if=/dev/ubi0_$VOLUME_ID ibs=$BLOCK_SIZE count=$NB_BLOCKS ; \
			dd if=/dev/ubi0_$VOLUME_ID ibs=1 skip=$(expr $KERNEL_SIZE - $LEFTOVER) count=$LEFTOVER) 2>/dev/null \
			| cat_file_size $KERNEL_SIZE |sha1sum |cut -d' ' -f1 \
		)
	else
		KERNEL_SHA1=$( ( dd if=$MNT/new_uzImage.bin ibs=$BLOCK_SIZE count=$NB_BLOCKS ; \
			dd if=$MNT/new_uzImage.bin ibs=1 skip=$(expr $KERNEL_SIZE - $LEFTOVER) count=$LEFTOVER) 2>/dev/null \
			| cat_file_size $KERNEL_SIZE |sha1sum |cut -d' ' -f1 \
		)
	fi

	if [ "$KERNEL_SHA1" != "$(cat ${KERNEL}.sha1)" ] ; then
		handle_err 9
	fi

	if [ -r ${DEVICETREE}.sha1 ] ; then
		DTB_SRC_SHA1=$( cat ${DEVICETREE}.sha1 )
	else
		DTB_SRC_SHA1=$( sha1sum ${DEVICETREE} |cut -d' ' -f1 )
	fi

	if [ "$INSTALL_ON_NAND" ] ; then
		DTB_SHA1=$( ( dd if=/dev/ubi0_$VOLUME_ID ibs=1 skip=$KERNEL_SIZE count=$DTB_SIZE) 2>/dev/null |sha1sum |cut -d' ' -f1 )
	else
		DTB_SHA1=$( ( dd if=$MNT/new_uzImage.bin ibs=1 skip=$KERNEL_SIZE count=$DTB_SIZE) 2>/dev/null |sha1sum |cut -d' ' -f1 )
	fi

	if [ "$DTB_SHA1" != "$DTB_SRC_SHA1" ] ; then
		handle_err 10
	fi
fi

if [ -r $BOOTLD -a -r ${BOOTLD}.sha1 ] ; then
	echo -e "\nVerifying bootloader..."

	BOOTLD_SIZE=$(wc -c $BOOTLD |cut -d' ' -f1)

	if [ "$INSTALL_ON_NAND" ] ; then
		BOOTLD_SHA1=$(nanddump -q -l $BOOTLD_SIZE $SYSDEV | cat_file_size $BOOTLD_SIZE |sha1sum |cut -d' ' -f1)
	else
		BOOTLD_SHA1=$(dd if=$SYSDEV ibs=1 skip=512 count=$BOOTLD_SIZE 2>/dev/null | cat_file_size $BOOTLD_SIZE |sha1sum |cut -d' ' -f1)
	fi

	if [ "$BOOTLD_SHA1" != "$(cat ${BOOTLD}.sha1)" ] ; then
		handle_err 11
	fi
fi

echo -e "\nCommiting changes..."

mkdir -p $MNT/dev $MNT/root

[ -r $ROOTFS ] && if [ "$ROOTFS_IS_BACKUP" ] ; then
	 mv $MNT/new-rootfs.squashfs $MNT/rootfs.squashfs
	 [ -r $ROOTFS.sha1 ] && cp $ROOTFS.sha1 $MNT/rootfs.squashfs.sha1
else
	 mv $MNT/new-rootfs.squashfs $MNT/update_r.bin
	 [ -r $ROOTFS.sha1 ] && cp $ROOTFS.sha1 $MNT/update_r.bin.sha1
fi
[ -r $MODULES_FS ] && if [ "$KERNEL_IS_BACKUP" ] ; then
	 mv $MNT/new-modules.squashfs $MNT/modules.squashfs
else
	 mv $MNT/new-modules.squashfs $MNT/update_m.bin
fi
[ -r $MININIT ] && mv $MNT/mininit-syspart-new $MNT/mininit-syspart
[ -r $KERNEL ] && if [ -z "$KERNEL_IS_BACKUP" ] ; then
	if [ "$INSTALL_ON_NAND" ] ; then
		ubirename /dev/ubi0 kernel kernel_bak kernel_bak kernel
	else
		if [ -r $MNT/uzImage.bin ] ; then
			cp $MNT/uzImage.bin $MNT/uzImage.bak
			[ -r $MNT/uzImage.bin.sha1 ] && cp $MNT/uzImage.bin.sha1 $MNT/uzImage.bak.sha1
		elif [ -r $MNT/vmlinuz.bin ] ; then
			cp $MNT/vmlinuz.bin $MNT/vmlinuz.bak
			[ -r $MNT/vmlinuz.bin.sha1 ] && cp $MNT/vmlinuz.bin.sha1 $MNT/vmlinuz.bak.sha1
		fi
		mv $MNT/new_uzImage.bin $MNT/uzImage.bin
		[ -r $KERNEL.sha1 ] && cp $KERNEL.sha1 $MNT/uzImage.bin.sha1
	fi
elif [ -z "$INSTALL_ON_NAND" ] ; then
	mv $MNT/new_uzImage.bin $MNT/uzImage.bin
	[ -r $KERNEL.sha1 ] && cp $KERNEL.sha1 $MNT/uzImage.bin.sha1
fi

sync

# Umount twice, since we bind-mounted twice
umount $MNT
umount $MNT
rmdir $MNT

# Run chown -R od:users /usr/local/home /media/data/apps
# on the next boot
echo 'CHOWN_HOME=yes' > /usr/local/etc/localfsinit.conf

exit 0
